
[{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/bash/","section":"Tags","summary":"","title":"Bash","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/github-pages/","section":"Tags","summary":"","title":"Github-Pages","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/obsidian/","section":"Tags","summary":"","title":"Obsidian","type":"tags"},{"content":"This is a step-by-step guide on how I created the blog you’re reading right now.\nYou can find all the code in my repo. solumath/Blog my own website HTML 0 0 Why Write a Blog? # Ever wanted to share your experiences or projects but weren’t sure where or how to start? That’s exactly how I’ve felt. I have been working on so many projects lately and I wanted to share a little bit of my experience.\nI\u0026rsquo;m not a professional writer, but a professional \u0026ldquo;fuck stuff up\u0026rdquo; guy and believe me that happens more often than it should. Most of the time it pays off and I learn from these mistakes and that\u0026rsquo;s why you are reading this.\nIf you’re setting up your own blog, don’t be afraid to fuck things up a bit. You’ll learn way more from experimenting than just following a guide on the internet.\nBlog Options # When I was considering writing my own blog my biggest priority was convenience. I wanted something that fit my workflow.\nAs I recently started using Obsidian I was looking into options how to take advantage of that.\nMostly I didn\u0026rsquo;t want to be tied down by a specific format which would make transition to different format challenging in the future.\nObsidian Publish # Obsidian publish is pretty nice if you want something that works out of the box. Is completely compatible with Obsidian and has some customisation.\nUnfortunately it\u0026rsquo;s a paid service of $8/month that is with yearly subscription, $10 if you go monthly. Maximum size of site is 4 GB.\nI don\u0026rsquo;t want to be bothered by limited size of my page or other specifications which I would need to tip toe around.\nI agree that for most people this solution is okay. But if you want it cheap there\u0026rsquo;s better way.\nQuartz # Quartz is an open source alternative to Obsidian publish. It fully supports Obsidian and is customizable.\nHowever customisation is harder and there is not that much community driven themes that I would find pleasing. The layout is similar to Obsidian vault which makes it impractical for blog site.\nHugo # Hugo is an open source framework that generates static sites from markdown files. It is not fully Obsidian compatible but I chose it anyway.\nI selected this framework for 4 key reasons:\nOpen source -\u0026gt; I can see how the code works Generates static files -\u0026gt; can be hosted on GitHub pages Fairly popular -\u0026gt; easier to find resolution for problems Customisable with community themes To be honest, setting up Hugo is easy but there are some obstacles and it is not plug and play. However, I was confident that I could make the most of its features and reach the desired result.\nSetting up Obsidian with Hugo # Workflow # The process of writing blog is simple:\nWrite the post in Obsidian Copy blog post using shell-commands plugin to a git repository Generate content and check the outcome in browser Push to GitHub GitHub workflow will deploy the page automatically on push to main branch %%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#262626', 'primaryTextColor': '#fff', 'primaryBorderColor': '#69e1ff', 'lineColor': '#fff', 'tertiaryColor': '#fff' } } }%% graph TD; A[Obsidian] --\u003e B[Git Repository] --\u003e C[Hugo] --\u003e D[GitHub] --\u003e E[GitHub Pages] Tools # Obsidian Hugo Git GitHub account Step by step # Obsidian # Check My Obsidian Setup before continuing here. I have summed my settings and plugins, which are necessary for the blog. Using Hugo with Obsidian brings some limitations. So to have the least amount of work when publishing from Obsidian I follow these rules.\n1. Directory Structure # Choose your blog structure\nHugo supports 2 styles of directory structure.\nDirectory as a post where you need to supply index.md ├─ blog ├─ posts ├─ 01-post-name ├─ index.md └─ images └─ image-name.jpg Single markdown files as a post ├─ blog ├─ posts ├─ 01-post-name.md └─ 02-post-name.md Here I went with first option because it keeps assets together as I have images or other material for the posts.\nAnother tip is the numbering in front of post names for two things. First you will know how many posts you have. And second you know the order in which they came out and would have been difficult to filter later.\n2. Front Matter Template # Every post must have a Front matter\nFront matter is part of file which includes metadata used by Hugo to decide what to do with content. You can use Templater plugin for more complex templates but the integrated templates were good enough for me.\nMy blog template looks like this.\n--- title: published: {{date}}T{{time}} modified: draft: true summary: tags: --- For Hugo to parse the published metadata correctly you need to follow dates format.\nHere I encountered the first problem!\nWhen publishing posts they won\u0026rsquo;t appear if their time is in future. So let\u0026rsquo;s say you provided the correct time and the post isn\u0026rsquo;t on the blog. What now?\nBy default Hugo will make assumption that your time zone is UTC. This might be bothering because sometimes you just create a quick post or want to test something out and you don\u0026rsquo;t see your post on the page.\nTo fix this you need to use HH:mm:ssZ for your time format. This will add your zone shift to the time.\n3. Naming Files # Replace white chars in file names with dashes\nTo avoid formatting problem when migrating Obsidian markdown to regular markdown I name my files so that any white chars are replaced with dashes. That\u0026rsquo;s because Obsidian uses char %20 for white chars which are incompatible with regular markdown.\nExample\nFrom: 001 hello world.md\nTo: 001-hello-world.md\nGitHub Repository # Create repository with name [your-name].github.io. And copy your repository.\ngit clone git@github.com:[your-name]/[your-name].github.io.git Hugo # Every Hugo theme has its own options how to install it. I use git modules since it is easy to update and there won\u0026rsquo;t be conflicts with my changes.\nFor my page I used Blowfish theme. Follow their installation guide.\nAfter you are done you should have structure similar to this\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ └── _index.md └── themes └── blowfish Now all that\u0026rsquo;s left is to copy our posts from obsidian to content/posts. You can do it with CLI or use the shell-commands plugin.\n# macro for shell-commands # {{!_blog_path}} is my custom defined variable cp -a {{!vault_path}}/[your-name].github.io/* {{!_blog_path}}/content/posts Generate the content for Hugo using\nhugo Or if you want to run the server to see the changes\nhugo serve Both of these commands will create static content in public folder which you need to commit too.\nCommit your changes after you are done\ngit add . git commit -m \u0026#34;new post\u0026#34; GitHub Pages # For deploying our blog we will need our domain and server so users can see our website.\nFortunately GitHub has free service called GitHub Pages which offers you subdomain and server. Which is perfect for testing deployment for such project. This however comes with limits as what your page can do:\nOnly static content, no databases or dynamic content. That means you can\u0026rsquo;t have comments on your website if you later wanted to add them. Site can\u0026rsquo;t be larger than 1 GB. Maximum bandwidth of 100 GB per month. and more \u0026hellip; 1. Create GitHub Page # To create GitHub page follow their documentation. For our use case we will change the workflow how to deploy the page.\nWhen you setup your repository go to settings and change the Build and deployment source to GitHub Actions. 2. Create GitHub Workflow # Follow the Hugo documentation.\nHere is copy of my workflow that makes sure that anytime I push the changes to main branch, the page will be rebuilt and pushed online.\nPaste this into .github/workflows/hugo.yaml.\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: # you can add more branches to the list branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: # Update to the release compatible with your theme # https://github.com/gohugoio/hugo/releases/latest HUGO_VERSION: 0.143.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb # Dart Sass is optional, check if your themes/modules really need it - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production TZ: America/Los_Angeles run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 After you are done with changes you can just push it to GitHub\ngit add . git commit -m \u0026#34;add hugo deployment\u0026#34; Push # After you committed all your changes and have the workflow setup. You can push your changes to your repository\ngit push And after a while you should see your blog at https://[your-name].github.io.\nReferences # https://github.com/solumath/Blog https://obsidian.md/ https://github.com/jackyzha0/quartz https://git-scm.com/ https://github.com/ https://docs.github.com https://gohugo.io/ https://github.com/SilentVoid13/Templater https://blowfish.page/ ","date":"8 February 2025","externalUrl":null,"permalink":"/posts/003-setting-up-blog/","section":"Posts","summary":"","title":"Obsidian + Hugo + Github pages Blog","type":"posts"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"8 February 2025","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":" Vault # Structure # My main sorting relies on keeping files placed in proper folders with correct topics. This allows me to navigate manually through the folder tree. Here\u0026rsquo;s an example of some of my folders:\nBlog — all my posts and associated materials Notes — quick items I need to remember or work on later Daily posts — ranging from daily tasks to dream journals Templates — templates for Ocbsidian OS — configuration settings for multiple operating systems I use Other topics \u0026hellip; ├─ blog ├─ notes ├─ daily-posts ├─ kubernetes ├─ OS ├─ ... └─ templates Settings # My settings are configured to enable Obsidian blog usage without requiring extensive file modifications later. The focus is on maintaining markdown-compatible files, ensuring flexibility for potential transfers:\nNew link format — when set to shortest path, it\u0026rsquo;s not markdown-compatible; use absolute or relative paths (I use relative paths due to Hugo blog requirements) Use Wikilinks — enabling this feature breaks markdown compatibility Detect all files extensions — enhances overall file overview within the vault Plugins # Advanced Tables # Source\nMakes editing markdown tables hassle-free. On the right panel, you\u0026rsquo;ll find these settings, which allow you to align content, sort tables, or remove entire columns or rows. Commander # Source\nAdds custom commands to Obsidian\u0026rsquo;s UI. You can assign icons to actions that would otherwise require remembering shortcuts. This makes the UI highly customizable and adaptable to your workflow. For instance, I\u0026rsquo;ve added the template insert function to the icons above notes. You can create any icon for any command available in Obsidian\u0026rsquo;s commands (accessible via CTRL + O).\nDataview # Source\nEnables you to query your vault like a database using SQL-like syntax. This creates dynamic views of aspects you\u0026rsquo;re interested in without requiring manual updates. For example, I use it to list all posts where draft = true in their front matter. The plugin provides nearly seamless interaction with your vault\u0026rsquo;s contents, allowing you to inspect any aspect you need.\nTABLE WITHOUT ID link(file.link, file.frontmatter.title) AS File, file.mtime AS Modified FROM \u0026#34;blog/posts\u0026#34; WHERE draft=true Git # Source\nProvides basic git navigation directly within Obsidian, eliminating the need to switch to the command line or another GUI. This streamlines the process of pulling and pushing changes when your vault or folder is synchronised through a repository.\nGithub Copilot # Source\nI utilize it primarily for autocompleting concepts and handling tedious tasks, which proves faster than manual typing. Requires an active subscription to Github Copilot.\nKanban # Source\nImplements sticky notes functionality within Obsidian, offering flexible viewing options including tables, columns, and lists based on your preferences. Similar to Trello with some limitations. Keyshots # Source\nThis is just must have if you are used to some IDE shortcuts. As a Visual Studio Code daily user, I rely heavily on shortcuts like moving lines up/down and using multiple cursors. Without these features, I wouldn\u0026rsquo;t find Obsidian practical enough to use. Keyshots supports three major IDEs:\nVisual Studio Code Microsoft Visual Studio Jetbrains IDEs But if you are Vim enjoyer. in Settings -\u0026gt; Editor you can enable vim bindings. Linter # Source\nLinting your files is necessary if you want to have structured formatting. Linter has many customizable rules you can set or omit based on your preference. And if you find something missing you can specify them in Linter Config. Omnisearch # Source\nI can\u0026rsquo;t stress how much this changes the way you can search for anything in your vault. Obsidian lacks native fuzzy search functionality. This however enables you to search anything and anywhere. Here is example how it works (gif from their official repository). Shell-commands # Source\nEnables CLI command execution directly within Obsidian. I\u0026rsquo;ve setup multiple commands to streamline my workflow. Some of them you can see in the picture below. After you setup these commands. They are accessible using CTRL + P and their respective name. Feature I would like to highlight are Preactions.\nThese are customizable actions that are done before calling your command. For instance, when committing from Obsidian, I use Preactions to create customizable commit messages. Now i just need to type CTRL + P find name of my command e.g. blog: deploy post and this little window will pop up.\nWarning\nWhen configuring Preactions, ensure the variable is empty by default if you want it to always request input. Select execute with value and leave it empty.\nTable of Contents # Source\nPerfect for generating table of contents for readme files. The plugin offers Github-compliant links and automatically updates when file changes occur.\nUpdate Modified Date # Source\nThis minimal solution helps track post updates. Simply configure the property name in your front matter, and it will automatically update after your specified delay.\nSync(th)ing Across Devices # Source\nNow we get to the big deal. Having synchronisation between multiple devices is the most crucial thing anyone can imagine. I mean you don\u0026rsquo;t want to manually download your notes every time you write something on your mobile or computer. That would be waste of time.\nOptions I found are obsidian sync and syncthing.\nObsidian Sync # Obsidian sync standard version is $4/month if you buy yearly subscription. And hase some real limitations like:\n1 synced vault 1 GB total storage 5 MB maximum file size 1 month version history And even if you buy the premium plan the maximum of 10 GB can get pretty annoying if you are saving images into your vault(s). Even with the ease of use this was not a way for me to go.\nSyncthing # So the other option was syncthing. Here you are limited by your hardware. Which is perfect since this is much cheaper than paying the subscription. You just install the syncthing to devices and add each other as a shareable device and they will sync using a public relay. Public relays are servers that are hosted by other people so your devices can make connection when you don\u0026rsquo;t have a public IP. The sync of files is encrypted so you don\u0026rsquo;t have to worry about it.\nBut there\u0026rsquo;s catch about this also.\nNow imagine this scenario. You are working on your PC and doing some note taking. All of sudden you need to leave. You grab your phone and go out. And then you realise. I forgot to sync the vault and don\u0026rsquo;t have the latest notes on my phone.\nThis is exactly what happened to me. If you don\u0026rsquo;t have syncthing running in background on your phone and on your other devices at the same time you won\u0026rsquo;t have the latest notes.\nSo I spin up Syncthing on my home server. Why? The server will serve as a root of truth for my devices. Whenever something updates on any device it will be first synced to server and then to others.\nThis enables you to sync whenever you need instead of having data stealing app running all the time. That is if you care enough. But even though I think having a middle man that has your backup data is better.\nSettings # So how does it look? In folders I share my vault folder Matrix. And in remote devices I added my server Matrix-01. When adding the remote device check select shared folders. In my scenario I only want to share my obsidian vault Matrix. Also I checked auto accept in case I add more vaults/folders. This will make it easier to auto accept sharing new folders without need to go to settings. If you want more accessibility you can set the server as introducer which will automatically add any devices connected to your server.\nConclusion # I hope you discovered something new or useful. While my setup may not be the best, it\u0026rsquo;s unique enough to show you some tips and tricks I found out along the way.\nIn conclusion, here are my five essential plugins without which I couldn\u0026rsquo;t effectively work:\nOmnisearch Keyshots Shell-commands Dataview Linter ","date":"3 February 2025","externalUrl":null,"permalink":"/posts/002-my-obsidian-setup/","section":"Posts","summary":"","title":"My obsidian setup","type":"posts"},{"content":"","date":"3 February 2025","externalUrl":null,"permalink":"/tags/obsidian-plugin/","section":"Tags","summary":"","title":"Obsidian-Plugin","type":"tags"},{"content":" Hello there # ","date":"3 February 2025","externalUrl":null,"permalink":"/posts/001-hello-world/","section":"Posts","summary":"","title":"Hello World","type":"posts"},{"content":"","date":"20 January 2025","externalUrl":null,"permalink":"/about/","section":"index","summary":"","title":"","type":"page"},{"content":"","date":"20 January 2025","externalUrl":null,"permalink":"/","section":"index","summary":"","title":"index","type":"page"},{"content":"","date":"20 January 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]